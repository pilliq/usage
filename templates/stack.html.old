<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.browser text {
  text-anchor: end;
}

</style>
<body>
<script src="/static/js/d3.min.js"></script>
<script src="/static/js/underscore-min.js"></script>
<script>

var margin = {top: 20, right: 20, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var parseDate = d3.time.format("%Y-%m").parse,
    formatPercent = d3.format("s");

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var color = d3.scale.category20();

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickFormat(formatPercent);

var area = d3.svg.area()
    .x(function(d) { return x(d.date); })
    .y0(function(d) { return y(d.y0); })
    .y1(function(d) { return y(d.y0 + d.y); });

var stack = d3.layout.stack()
    .values(function(d) { return d.values; });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

function toShortVersion(version) {
    return version.substring(0, 3) + ".x";
}

function combineVersions(data) {
    var combined = {};
    _.each(data, function(element, index) {
        var key;
        if (element["_id"]["version"] == null) {
            key = element["_id"]["version"];
        } else {
            key = toShortVersion(element["_id"]["version"]);
        }
        var date = element["_id"]["t"];
        if (key in combined) {
            combined[key]["values"].push({"date": date, value: element["value"]});
        } else {
            combined[key] = {values: [{"date": date, value: element["value"]}]};
        }
    });
    // Go through versions and combine similar dates
    _.each(combined, function(value, key) {
        var values = [];
        var grouped = _.groupBy(value["values"], "date");
        _.each(grouped, function(v, k) {
            var total = {};
            total["date"] = k;
            total["value"] = 0;
            _.each(v, function(e, i) {
                total["value"] += e["value"]; 
            });
            values.push(total);
        });
        combined[key] = {"values": values};
    });
    console.log(combined);
    ///*
    //   Input: 
    //   {
    //       "2.5.x": [{date: "2013-11", value: 123}, {date: "2013-10", value: 321}, ...],
    //       "2.4.x": [{date: "2013-11", value: 123}, {date: "2013-10", value: 321}, ...],
    //   }
    //   Output:
    //   [
    //       {date: "2013-11", value: 123, version: "2.5.x"},
    //       {date: "2013-10", value: 321, version: "2.5.x"},
    //       {date: "2013-11", value: 123, version: "2.4.x"},
    //       {date: "2013-10", value: 321, version: "2.4.x"},
    //       ...
    //   ]
    // */
    //// flatten into single array with version as a field in each element
    //var result = [];
    //_.each(combined, function(value, key) {
    //    _.each(value, function(elem, i) {
    //        result.push(_.extend(elem, {"version": key}));
    //    });
    //});
    return combined;
}

function unindex(data, keyName, func) {
    var result = [];
    var keys = _.keys(data);
    for (var i=0, len=keys.length; i < len; i++) {
       var nonIndex = {};
       if (typeof func !== "undefined") {
           nonIndex[keyName] = func(keys[i]);
       } else {
           nonIndex[keyName] = keys[i];
       }
       var point = data[keys[i]];
       result.push(_.extend(point, nonIndex));
    }
    return result;
}

// accepts data in final form
function getVersions(data) {
    return _.unique(_.pluck(data, "version"));
}

// returns an array of all the dates represented in the data
function getDates(data) {
    var dates = {};
    _.each(data, function(elem, index) {
        _.each(elem.values, function(e, i) {
            if (!(e.date in dates)) {
                dates[e.date] = true;
            }
        });
    });
    return _.keys(dates);
}

function addDefaultData(data, dates) {
    _.each(data, function(elem, index) {
        var valueDates = _.pluck(elem.values, "date");
        var needDefaults = _.difference(dates, valueDates);
        _.each(needDefaults, function(e, i) {
            elem.values.push({"date": e, value: 0});
        });
    });
}

function filter(data) {
    var result = {};
    _.each(data, function(value, key) {
        if (key !== null) {
            
        }
    });
    return result;
}

d3.json("/versions", function(error, allData) {
  console.log("combined");
  var data = unindex(combineVersions(allData), 'version');
  console.log(data);
  debugger;
  //data.forEach(function(d) {
  //  d["date"] = parseDate(d["date"]);
  //});
  console.log(data);
  var dates = getDates(data);
  addDefaultData(data, dates);
  console.log("after default data")
  console.log(data)
  
  var versions = getVersions(data);
  color.domain(versions);

  var browsers = stack(data.map(function(d) {
        return {
            name: d.version,
            values: d.values.map(function(dat) {
                return {date: parseDate(dat.date), y: dat.value};
            })
        };
  }));
  console.log(browsers);

  x.domain(dates.map(function(d){ return parseDate(d); }));

  var browser = svg.selectAll(".browser")
      .data(browsers)
    .enter().append("g")
      .attr("class", "browser");

  browser.append("path")
      .attr("class", "area")
      .attr("d", function(d) { return area(d.values); })
      .style("fill", function(d) { return color(d.name); });

  browser.append("text")
      .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
      .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.y0 + d.value.y / 2) + ")"; })
      .attr("x", -6)
      .attr("dy", ".35em")
      .text(function(d) { return d.name; });

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);
});

</script>
